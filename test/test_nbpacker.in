/* -*- c -*- */

header
{
##include "los/lpacker.h"
##include "los/lunpacker.h"
##include "los/lint.h"
##include "los/lstring.h"
##include "los/ltuple.h"
##include "libltest/bytestream.h"

##include <unistd.h>
}

data
{
  gchar *tmpfile;
}

setup
{
  gint fd;
  GError *err = NULL;
  /* create a tmpfile */
  if ((fd = g_file_open_tmp(NULL, &data->tmpfile, &err)) < 0)
    abort(); /* [FIXME] */
  close(fd);
}

teardown
{
  unlink(data->tmpfile);
}

test /* int_92 */
{
  LStream *stream;
  LPacker *packer;
  LUnpacker *unpacker;
  LObject *obj;
  GError *err = NULL;
  /* create the packer */
  stream = byte_stream_new(data->tmpfile, "w");
  packer = l_packer_new(stream);
  L_OBJECT_CLEAR(stream);
  /* pack */
  obj = L_OBJECT(l_int_new(92));
  l_packer_add(packer, obj);
  L_OBJECT_CLEAR(obj);
  /* process */
  while (!l_packer_send(packer, &err))
    {
      PIF_CHECK(!err);
    }
  /* cleanup */
  L_OBJECT_CLEAR(packer);
  /* create the unpacker */
  stream = byte_stream_new(data->tmpfile, "r");
  unpacker = l_unpacker_new(stream);
  L_OBJECT_CLEAR(stream);
  /* unpack */
  while (!(obj = l_unpacker_recv(unpacker, &err)))
    {
      PIF_CHECK(!err);
    }
  /* check object */
  PIF_CHECK(L_IS_INT(obj));
  PIF_CHECK_EQ(L_INT_VALUE(obj), 92);
  /* cleanup */
  L_OBJECT_CLEAR(obj);
  L_OBJECT_CLEAR(unpacker);
}

test /* int_0x12345678 */
{
  LStream *stream;
  LPacker *packer;
  LUnpacker *unpacker;
  LObject *obj;
  GError *err = NULL;
  /* create the packer */
  stream = byte_stream_new(data->tmpfile, "w");
  packer = l_packer_new(stream);
  L_OBJECT_CLEAR(stream);
  /* pack */
  obj = L_OBJECT(l_int_new(0x12345678));
  l_packer_add(packer, obj);
  L_OBJECT_CLEAR(obj);
  /* process */
  while (!l_packer_send(packer, &err))
    {
      PIF_CHECK(!err);
    }
  /* cleanup */
  L_OBJECT_CLEAR(packer);
  /* create the unpacker */
  stream = byte_stream_new(data->tmpfile, "r");
  unpacker = l_unpacker_new(stream);
  L_OBJECT_CLEAR(stream);
  /* unpack */
  while (!(obj = l_unpacker_recv(unpacker, &err)))
    {
      PIF_CHECK(!err);
    }
  /* check object */
  PIF_CHECK(L_IS_INT(obj));
  PIF_CHECK_EQ(L_INT_VALUE(obj), 0x12345678);
  /* cleanup */
  L_OBJECT_CLEAR(obj);
  L_OBJECT_CLEAR(unpacker);
}

test /* sting_1 */
{
  LStream *stream;
  LPacker *packer;
  LUnpacker *unpacker;
  LObject *obj;
  GError *err = NULL;
  /* create the packer */
  stream = byte_stream_new(data->tmpfile, "w");
  packer = l_packer_new(stream);
  L_OBJECT_CLEAR(stream);
  /* pack */
  obj = L_OBJECT(l_string_new("test-string-1", -1));
  l_packer_add(packer, obj);
  L_OBJECT_CLEAR(obj);
  /* process */
  while (!l_packer_send(packer, &err))
    {
      PIF_CHECK(!err);
    }
  /* cleanup */
  L_OBJECT_CLEAR(packer);
  /* create the unpacker */
  stream = byte_stream_new(data->tmpfile, "r");
  unpacker = l_unpacker_new(stream);
  L_OBJECT_CLEAR(stream);
  /* unpack */
  while (!(obj = l_unpacker_recv(unpacker, &err)))
    {
      PIF_CHECK(!err);
    }
  /* check object */
  PIF_CHECK(L_IS_STRING(obj));
  PIF_CHECK_EQ_STR(L_STRING(obj)->str, "test-string-1");
  /* cleanup */
  L_OBJECT_CLEAR(obj);
  L_OBJECT_CLEAR(unpacker);
}

test /* sting_2 */
{
  LStream *stream;
  LPacker *packer;
  LUnpacker *unpacker;
  LObject *obj;
  GError *err = NULL;
  /* create the packer */
  stream = byte_stream_new(data->tmpfile, "w");
  packer = l_packer_new(stream);
  L_OBJECT_CLEAR(stream);
  /* pack */
  obj = L_OBJECT(l_string_new("test-string-2", -1));
  l_packer_add(packer, obj);
  L_OBJECT_CLEAR(obj);
  /* process */
  while (!l_packer_send(packer, &err))
    {
      PIF_CHECK(!err);
    }
  /* cleanup */
  L_OBJECT_CLEAR(packer);
  /* create the unpacker */
  stream = byte_stream_new(data->tmpfile, "r");
  unpacker = l_unpacker_new(stream);
  L_OBJECT_CLEAR(stream);
  /* unpack */
  while (!(obj = l_unpacker_recv(unpacker, &err)))
    {
      PIF_CHECK(!err);
    }
  /* check object */
  PIF_CHECK(L_IS_STRING(obj));
  PIF_CHECK_EQ_STR(L_STRING(obj)->str, "test-string-2");
  /* cleanup */
  L_OBJECT_CLEAR(obj);
  L_OBJECT_CLEAR(unpacker);
}

test /* tuple_empty */
{
  LStream *stream;
  LPacker *packer;
  LUnpacker *unpacker;
  LObject *obj;
  GError *err = NULL;
  /* create the packer */
  stream = byte_stream_new(data->tmpfile, "w");
  packer = l_packer_new(stream);
  L_OBJECT_CLEAR(stream);
  /* pack */
  obj = L_OBJECT(l_tuple_new(0));
  l_packer_add(packer, obj);
  L_OBJECT_CLEAR(obj);
  /* process */
  while (!l_packer_send(packer, &err))
    {
      PIF_CHECK(!err);
    }
  /* cleanup */
  L_OBJECT_CLEAR(packer);
  /* create the unpacker */
  stream = byte_stream_new(data->tmpfile, "r");
  unpacker = l_unpacker_new(stream);
  L_OBJECT_CLEAR(stream);
  /* unpack */
  while (!(obj = l_unpacker_recv(unpacker, &err)))
    {
      PIF_CHECK(!err);
    }
  /* check object */
  PIF_CHECK(L_IS_TUPLE(obj));
  PIF_CHECK_EQ(L_TUPLE_SIZE(obj), 0);
  /* cleanup */
  L_OBJECT_CLEAR(obj);
  L_OBJECT_CLEAR(unpacker);
}

test /* tuple_1 */
{
  LStream *stream;
  LPacker *packer;
  LUnpacker *unpacker;
  LObject *obj;
  GError *err = NULL;
  /* create the packer */
  stream = byte_stream_new(data->tmpfile, "w");
  packer = l_packer_new(stream);
  L_OBJECT_CLEAR(stream);
  /* pack */
  obj = L_OBJECT(l_tuple_newl_give(1, l_int_new(123), NULL));
  l_packer_add(packer, obj);
  L_OBJECT_CLEAR(obj);
  /* process */
  while (!l_packer_send(packer, &err))
    {
      PIF_CHECK(!err);
    }
  /* cleanup */
  L_OBJECT_CLEAR(packer);
  /* create the unpacker */
  stream = byte_stream_new(data->tmpfile, "r");
  unpacker = l_unpacker_new(stream);
  L_OBJECT_CLEAR(stream);
  /* unpack */
  while (!(obj = l_unpacker_recv(unpacker, &err)))
    {
      PIF_CHECK(!err);
    }
  /* check object */
  PIF_CHECK(L_IS_TUPLE(obj));
  PIF_CHECK_EQ(L_TUPLE_SIZE(obj), 1);
  PIF_CHECK(L_IS_INT(L_TUPLE_ITEM(obj, 0)));
  PIF_CHECK_EQ(L_INT_VALUE(L_TUPLE_ITEM(obj, 0)), 123);
  /* cleanup */
  L_OBJECT_CLEAR(obj);
  L_OBJECT_CLEAR(unpacker);
}

test /* tuple_2 */
{
  LStream *stream;
  LPacker *packer;
  LUnpacker *unpacker;
  LObject *obj;
  GError *err = NULL;
  /* create the packer */
  stream = byte_stream_new(data->tmpfile, "w");
  packer = l_packer_new(stream);
  L_OBJECT_CLEAR(stream);
  /* pack */
  obj = L_OBJECT(l_tuple_newl_give(2,
                                   l_int_new(123),
                                   l_int_new(456),
                                   NULL));
  l_packer_add(packer, obj);
  L_OBJECT_CLEAR(obj);
  /* process */
  while (!l_packer_send(packer, &err))
    {
      PIF_CHECK(!err);
    }
  /* cleanup */
  L_OBJECT_CLEAR(packer);
  /* create the unpacker */
  stream = byte_stream_new(data->tmpfile, "r");
  unpacker = l_unpacker_new(stream);
  L_OBJECT_CLEAR(stream);
  /* unpack */
  while (!(obj = l_unpacker_recv(unpacker, &err)))
    {
      PIF_CHECK(!err);
    }
  /* check object */
  PIF_CHECK(L_IS_TUPLE(obj));
  PIF_CHECK_EQ(L_TUPLE_SIZE(obj), 2);
  PIF_CHECK(L_IS_INT(L_TUPLE_ITEM(obj, 0)));
  PIF_CHECK_EQ(L_INT_VALUE(L_TUPLE_ITEM(obj, 0)), 123);
  PIF_CHECK(L_IS_INT(L_TUPLE_ITEM(obj, 1)));
  PIF_CHECK_EQ(L_INT_VALUE(L_TUPLE_ITEM(obj, 1)), 456);
  /* cleanup */
  L_OBJECT_CLEAR(obj);
  L_OBJECT_CLEAR(unpacker);
}

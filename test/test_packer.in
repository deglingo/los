/* -*- c -*- */

header {
##include "los/lmemstream.h"
##include "los/lpacker.h"
##include "los/lunpacker.h"
##include "los/lint.h"
##include "los/lstring.h"
##include <string.h>
}

data {
  LStream *stream;
  LPacker *packer;
  LUnpacker *unpacker;
}

setup { 
  data->stream = l_mem_stream_new("", 0);
  data->packer = l_packer_new(data->stream);
  data->unpacker = l_unpacker_new(data->stream);
}

teardown {
  L_OBJECT_CLEAR(data->unpacker);
  L_OBJECT_CLEAR(data->packer);
  L_OBJECT_CLEAR(data->stream);
}

test
{
  PIF_CHECK(data->packer);
  PIF_CHECK(data->unpacker);
}

test /* eof */
{
  GError *err = NULL;
  PIF_CHECK(!l_unpacker_get(data->unpacker, &err));
  PIF_CHECK(err);
  PIF_CHECK(err->domain == L_PACK_ERROR);
  PIF_CHECK(err->code == L_PACK_ERROR_EOF);
}

#define TEST_PACK_OBJECT(obj_new, check_val) do {                       \
    LObject *obj1, *obj2;                                               \
    GError *err = NULL;                                                 \
    obj1 = L_OBJECT(obj_new);                                           \
    guint8 buf;                                                         \
    /* pack */                                                          \
    PIF_CHECK(l_packer_put(data->packer, obj1, &err));                  \
    /* unpack */                                                        \
    l_stream_seek(data->stream, 0, L_STREAM_SEEK_SET);                  \
    obj2 = l_unpacker_get(data->unpacker, &err);                        \
    /* compare the results */                                           \
    PIF_CHECK(obj2);                                                    \
    PIF_CHECK(L_OBJECT_GET_CLASS(obj1) == L_OBJECT_GET_CLASS(obj2));    \
    check_val;                                               \
    L_OBJECT_CLEAR(obj1);                                               \
    L_OBJECT_CLEAR(obj2);                                               \
    /* make sure we didn't leave any data behind */                     \
    PIF_CHECK(l_stream_read(data->stream, &buf, 1, NULL, NULL)          \
              == L_STREAM_STATUS_EOF);                                  \
  } while (0)

test { TEST_PACK_OBJECT(l_int_new(91),
                        PIF_CHECK(L_INT_VALUE(obj2) == 91)); }

test { TEST_PACK_OBJECT(l_string_new("string-test"),
                        PIF_CHECK_EQ_STR(L_STRING(obj2)->str, "string-test")); }

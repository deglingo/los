/* -*- c -*- */

header {
##include "los/lpacker.h"
##include "los/lunpacker.h"
##include "libltest/ltestpackable.h"

##include "los/lmemstream.h"
##include "los/lint.h"
##include "los/lstring.h"
##include "los/ltuple.h"

##include <string.h>
}

data {
  LStream *stream;
  LPacker *packer;
  LUnpacker *unpacker;
}

setup { 
  data->stream = l_mem_stream_new("", 0);
  data->packer = l_packer_new(data->stream);
  data->unpacker = l_unpacker_new(data->stream);
}

teardown {
  L_OBJECT_CLEAR(data->unpacker);
  L_OBJECT_CLEAR(data->packer);
  L_OBJECT_CLEAR(data->stream);
}

test
{
  PIF_CHECK(data->packer);
  PIF_CHECK(data->unpacker);
}

test /* eof */
{
  GError *err = NULL;
  PIF_CHECK(!l_unpacker_get(data->unpacker, &err));
  PIF_CHECK(err);
  PIF_CHECK(err->domain == L_PACK_ERROR);
  PIF_CHECK(err->code == L_PACK_ERROR_EOF);
  g_clear_error(&err);
}

#define TEST_PACK_OBJECT(obj_new, check_val) do {                       \
    LObject *obj1, *obj2;                                               \
    GError *err = NULL;                                                 \
    obj1 = L_OBJECT(obj_new);                                           \
    guint8 buf;                                                         \
    /* pack */                                                          \
    PIF_CHECK(l_packer_put(data->packer, obj1, &err));                  \
    /* unpack */                                                        \
    l_stream_seek(data->stream, 0, L_STREAM_SEEK_SET);                  \
    obj2 = l_unpacker_get(data->unpacker, &err);                        \
    /* compare the results */                                           \
    PIF_CHECK(obj2);                                                    \
    PIF_CHECK(L_OBJECT_GET_CLASS(obj1) == L_OBJECT_GET_CLASS(obj2));    \
    check_val;                                                          \
    /* make sure we didn't leave any data behind */                     \
    PIF_CHECK(l_stream_read(data->stream, &buf, 1, NULL, NULL)          \
              == L_STREAM_STATUS_EOF);                                  \
    /* cleanup */                                                       \
    l_object_unref(obj1);                                               \
    l_object_unref(obj2);                                               \
  } while (0)

#define TEST_PACK_OBJECT_(obj) \
  test_pack_object(L_OBJECT(obj), data->stream, data->packer, data->unpacker)

header
{
  static LObject *test_pack_object ( LObject *obj1,
                                     LStream *stream,
                                     LPacker *packer,
                                     LUnpacker *unpacker )
  {
    LObject *obj2 = NULL;
    GError *err = NULL;
    /* pack */
    PIF_CHECK(l_packer_put(packer, obj1, &err));
    PIF_CHECK(!err);
    /* reset stream */
    l_stream_seek(stream, 0, L_STREAM_SEEK_SET);                  \
    /* unpack */
    obj2 = l_unpacker_get(unpacker, &err);
    PIF_CHECK(obj2);
    PIF_CHECK(!err);
    /* check obj type */
    PIF_CHECK(L_OBJECT_GET_CLASS(obj1) == L_OBJECT_GET_CLASS(obj2));
    /* ok */
    return obj2;
  }
}

test { TEST_PACK_OBJECT(l_int_new(91),
                        PIF_CHECK(L_INT_VALUE(obj2) == 91)); }

test { TEST_PACK_OBJECT(l_string_new("string-test", -1),
                        PIF_CHECK_EQ_STR(L_STRING(obj2)->str, "string-test")); }

test /* pack_tuple */
{
  LTuple *t1, *t2;
  /* create some tuple */
  t1 = l_tuple_new(2);
  l_tuple_give_item(t1, 0, L_OBJECT(l_int_new(2)));
  l_tuple_give_item(t1, 1, L_OBJECT(l_string_new("tuple-string-test", -1)));
  /* pack/unpack */
  t2 = L_TUPLE(TEST_PACK_OBJECT_(t1));
  L_OBJECT_CLEAR(t1);
  /* check result */
  PIF_CHECK(L_TUPLE_SIZE(t2) == 2);
  PIF_CHECK(L_IS_INT(L_TUPLE_ITEM(t2, 0)));
  PIF_CHECK(L_INT_VALUE(L_TUPLE_ITEM(t2, 0)) == 2);
  PIF_CHECK(L_IS_STRING(L_TUPLE_ITEM(t2, 1)));
  PIF_CHECK_EQ_STR(L_STRING(L_TUPLE_ITEM(t2, 1))->str, "tuple-string-test");
  /* cleanup */
  L_OBJECT_CLEAR(t2);
}

test /* pack_packable */
{
  LTestPackable *p1, *p2;
  /* create the object */
  p1 = ltest_packable_new(34, "test-packable");
  /* pack/unpack */
  p2 = LTEST_PACKABLE(TEST_PACK_OBJECT_(p1));
  L_OBJECT_CLEAR(p1);
  /* check result */
  PIF_CHECK_EQ(p2->a, 34);
  PIF_CHECK_EQ_STR(p2->b, "test-packable");
  /* cleanup */
  L_OBJECT_CLEAR(p2);
}

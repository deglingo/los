/* -*- c -*- */

header
{
##include "los/lobject.h"
##include "test/lostestfake.h"
}

unit /* FakeClass */
{
  test {
    LObjectClass *cls = CLASS_FAKE;
    PIF_CHECK(cls);
    /* class initialization must call the class_init handler */
    PIF_CHECK(((FakeClass *) cls)->dummy == 42);
    /* isclass must be true for a class object */
    PIF_CHECK(l_object_isclass((LObject *) cls));
    /* Fake is a subclass of LObject (and of itself) ... */
    PIF_CHECK(l_object_issubclass((LObject *) cls, (LObject *) L_CLASS_OBJECT));
    PIF_CHECK(l_object_issubclass((LObject *) cls, (LObject *) CLASS_FAKE));
    /* ... but it is not a Fake2 subclass */
    PIF_CHECK(!l_object_issubclass((LObject *) cls, (LObject *) CLASS_FAKE2));
  }
}

unit /* Fake2Class */
{
  test {
    LObjectClass *cls = CLASS_FAKE2;
    PIF_CHECK(cls);
    /* class initialization must copy the base class and call the
       class_init handler */
    PIF_CHECK(((FakeClass *) cls)->dummy == 84);
    /* Fake2 is a subclass of LObject, Fake and of itself */
    PIF_CHECK(l_object_issubclass((LObject *) cls, (LObject *) L_CLASS_OBJECT));
    PIF_CHECK(l_object_issubclass((LObject *) cls, (LObject *) CLASS_FAKE));
    PIF_CHECK(l_object_issubclass((LObject *) cls, (LObject *) CLASS_FAKE2));
  }
}

/* [FIXME] the tests below should ge in test_instance */

unit /* Fake */
{
  data { LObject *fake; }
  setup { data->fake = l_object_new(CLASS_FAKE, NULL); }
  teardown { L_OBJECT_CLEAR(data->fake); }
  test {
    PIF_CHECK(data->fake);
    /* l_object_new() must call the instance_init handler */
    PIF_CHECK(((Fake *)data->fake)->instval == 3);
    /* test the get_class macro */
    PIF_CHECK(L_OBJECT_GET_CLASS(data->fake) == CLASS_FAKE);
    /* isclass must be false for an instance */
    PIF_CHECK(!l_object_isclass(data->fake));
  }
}

unit /* destructor */
{
  test {
    LObject *fake = l_object_new(CLASS_FAKE, NULL);
    fake_dispose_count = 0; /* these may be modified by other tests */
    fake_finalize_count = 0;
    /* dispose may be called 'by hand' */
    l_object_dispose(fake);
    PIF_CHECK(fake_dispose_count == 1);
    PIF_CHECK(fake_finalize_count == 0);
    /* now dropping ref count to 0 should call dispose and finalize */
    l_object_unref(fake);
    PIF_CHECK(fake_dispose_count == 2);
    PIF_CHECK(fake_finalize_count == 1);
  }
}

unit /* Fake2 */
{
  data { LObject *fake; }
  setup { data->fake = l_object_new(CLASS_FAKE2, NULL); }
  teardown { L_OBJECT_CLEAR(data->fake); }
  test {
    PIF_CHECK(data->fake);
    /* l_object_new() must all the instance init handlers in order */
    PIF_CHECK(((Fake *)data->fake)->instval == 6);
    /* test the get_class macro */
    PIF_CHECK(L_OBJECT_GET_CLASS(data->fake) == CLASS_FAKE2);
  }
}
